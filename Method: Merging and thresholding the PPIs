purpose:  The purpose of this code is to i) Upload the PINOT data and convert the method annotation ii) Upload the MIST and HIPPIE data and convert the method annotation to make consistent with PINOT iii) to generate new rows for each pubmed annotation & method annotation iv) to exclude interactors for which there are fewer than 3 rows in the dataframe v) to remove duplicates, so that I generate a unique list of interactors which meet the threshhold. 

Project number: 1 - revision

Author: "Katie Kelly"

Contact details: katie.kelly.14@ucl.ac.uk

date: "2023-01-26"

Date script last modified: 2023-02-03   

Package dependencies: 
library("dplyr")
library("tidyverse")
library("stringr")

output: pdf_document

#Thresholding step---------------------------------------------------------------------------------------------------------------------------------------------------------
#generating the merge files according to 'method' observation------------------------------------------------------------
#PINOT------------------------------------------------------------
#upload the PINOT file containing the FL interactions within the NSL complex

PINOT_rawdata <- read.csv('data/rawdata/PINOT_FL.csv')


#The following code replaces the names of the methods with those listed in the methods conversion file from PINOT (supplementary files)
rep_str = c('CoIP'='Co-immunoprecipitation','Xray'='X-ray_cristallography','APMS'='Affinity_Purification_&_Mass_Spectrometry','2Hyb'='Two_Hybrid','CoSed'='Cosedimentation','Imaging'='Imaging_Technique','Proximity'='Proximity_Ligation_Assay','Xlink'='Cross-linking','Array'='Arrays','Fluorescence'='Fluorescence_Technology', 'Complementation'='Reconstruction', 'Chromatography'='Molecular_Sieving','CHIP'='Chromatin_IP','SPR'='Surface_Plasmon_Resonance','Thermal'='Calorimetry' )
PINOT_rawdata$Method <- str_replace_all(PINOT_rawdata$Method, rep_str)

#The following line of code creates a new column for each of the methods used to detect the interaction, and splits the dataframe according to ';', such that each new method is assigned a new column.

PINOT_rawdata_methodsplit <- PINOT_rawdata %>%
separate(Method, c("Method1", "Method2","Method3","Method4","Method5","Method6","Method7"), ";")

#The following piece of code generates a new row for every separate method, for each interaction.This file is then ready for the conversion of method name > methodID using the conversion file.
 PINOT_rawdata_methodsplit_rows <- PINOT_rawdata_methodsplit %>% 
  pivot_longer(c(`Method1`, `Method2`,`Method3`,`Method4`, `Method5`,`Method6`, `Method7`), names_to = "Method_Num", values_to = "Method_name") %>% na.omit( PINOT_rawdata_methodsplit_rows) 

write.csv(PINOT_rawdata_methodsplit_rows,"data/processed_data/PINOT_FL_methodsplit.csv", row.names = FALSE)

#HIPPIE------------------------------------------------------------
#The following code is for parsing the HIPPIE file. The Methods have been separated into new columns in Excel for ease. Any data lacking either method or PubMedID has also been removed in Excel first. This code will generate a new row for each of the interaction detection events (new row per method).
HIPPIE_rawdata_methodsplit_columns <- read.csv('data/rawdata/HIPPIE_FL_methodsplitExcel.csv', header=FALSE)

HIPPIE_rawdata_methodsplit_columns <-HIPPIE_rawdata_methodsplit_columns[-c(1,3,5,6)] #Leaves Entrez ID, and detection method (1 per column) & score

names(HIPPIE_rawdata_methodsplit_columns)[1] <- "A"
names(HIPPIE_rawdata_methodsplit_columns)[2] <- "B"
names(HIPPIE_rawdata_methodsplit_columns)[3] <- "score"
names(HIPPIE_rawdata_methodsplit_columns)[4] <- "method"

B <- HIPPIE_rawdata_methodsplit_columns

n.col.meths <- ncol(B)
i <- 5
parsed <- B[, c(1:4)]

for (i in 5:n.col.meths) {
  add <- B[,c(1:3,i)]
  names(add)[4] <- "method"
  parsed <- rbind(parsed,add)
  i <- i+1
}

parsed <- parsed %>% filter(!method == 0) #remove all rows with '0' in the method 

write.csv(parsed, "data/processed_data/HIPPIE_FL_methodsplit.csv",row.names=FALSE)

#All entries in the HIPPIE file have an associated PubMed ID.

#MIST------------------------------------------------------------
#The following code is for parsing the MIST file. The Methods have been separated into new rows in Excel for ease. Entries without a PubMed ID or Method have also been removed already. This code will fill in the missing data in empty cells. Note that all empty cells have been filled with '0' in order to call the dataframe into Rstudio. The Method ID has also been isolated from the method name for downstream data processing.


B <-  read.csv('data/rawdata/MIST_FL_method_perrow.csv', header=TRUE)
end <- nrow(B)
i<-1

for (i in 1:end) {
  FLAG <- B[i,1]
  # if you have 0 in the name = replace with the line above. DO NOT REPLACE METHODS
  if (FLAG ==0) {
  B[i,1] <- B[(i-1),1]
  B[i,2] <- B[(i-1),2]
  B[i,3] <- B[(i-1),3]
  B[i,4] <- B[(i-1),4]
  # NO it is PUBMED and you have different values B[i,5] <- B[(i-1),5]
  B[i,6] <- B[(i-1),6]
  B[i,7] <- B[(i-1),7]
  }
 
  i <- i+1
}
B <-B[, c(1,2,3,4,7,8)] # retains all columns, except the pubmed ID column. 


write.csv(B, "data/processed_data/MIST_FL_methodsplit.csv",row.names=FALSE)
#The saved MIST file contains : entries that have at least one PubMedID & Method. 

#Method QC and annotation standardisation (MIST, HIPPIE)------------------------------------------------------------
#Now, we need to call back in the method conversion file, in order to convert all of the methodological annotations to the named method used for PINOT. This is because the MI are redundant, which means that many MI have been encapsulated under the same MI. This means that the PINOT data can be merged with the MIST and HIPPIE data. 

#call in the method conversion file
Method_conversion_file <-  read.csv('data/conversion_files/PINOT_method_conversion.csv', header=TRUE)
Method_conversion_file <- Method_conversion_file[c(5,7)]
names(Method_conversion_file)[1] <- "Name"
names(Method_conversion_file)[2] <- "Method"
Method_conversion_file <-unique(Method_conversion_file) #183 unique methods

#Import the processed MIST file, merge with the method conversion file and remove all 'general' or 'unspecified' methods

MIST_prepare_merge <-  read.csv('data/processed_data/MIST_FL_methodsplit.csv', header=TRUE)
MIST_prepare_merge <-merge(MIST_prepare_merge, Method_conversion_file, by.x="Method", by.y="Method", all.x=TRUE)
write.csv(MIST_prepare_merge, "data/processed_data/MIST_prepare_merge.csv",row.names=FALSE)

#To the above file, MI that are not found within the PINOT method conversion table have been manually annotated. Any interactions annotated with 'Unspecified' methods have been removed manually, prior to uploading in the next step.
MIST_prepare_merge <-  read.csv('data/processed_data/MIST_prepare_merge_annotated.csv', header=TRUE)
MIST_merge_file  <-MIST_prepare_merge[c(2,4,7)] #we want to keep the column containing the method name, since this is consistent with PINOT.
write.csv(MIST_merge_file, "data/processed_data/MIST_merge_file.csv",row.names=FALSE)


#Import the processed HIPPIE file, merge with the method conversion file to remove all 'unspecified' methods. Note that since parsingin R, rows with '0' in 'Method' column have been removed, and those entries with multi-ID have been rectified according to the PINOT conversion table. Those that could not be attributed a univocal entrez ID have been removed. 

HIPPIE_prepare_merge <-  read.csv('data/processed_data/HIPPIE_FL_methodsplit.csv', header=TRUE)
HIPPIE_prepare_merge <-merge(HIPPIE_prepare_merge, Method_conversion_file, by.x="method", by.y="Method",all.x=TRUE)
write.csv(HIPPIE_prepare_merge, "data/processed_data/HIPPIE_prepare_merge.csv",row.names=FALSE)

#To the above file, methods have been annotated manually, since they were not contained within the PINOT method conversion file. Any interactions annotated with 'Unspecified' methods have been removed manually, prior to uploading in the next step.
HIPPIE_prepare_merge <-  read.csv('data/processed_data/HIPPIE_prepare_merge_annotated.csv', header=TRUE) 
HIPPIE_merge_file  <-HIPPIE_prepare_merge[c(2,3,5)]
write.csv(HIPPIE_merge_file, "data/processed_data/HIPPIE_merge_file.csv",row.names=FALSE)


#Preparing the PINOT merge file--------------------------------------------------------

PINOT_prepare_merge <-  read.csv('data/processed_data/PINOT_FL_methodsplit.csv', header=TRUE) 
PINOT_prepare_merge <- PINOT_prepare_merge[c(3,6,12)]
names(PINOT_prepare_merge)[1] <- "A"
names(PINOT_prepare_merge)[2] <- "B"
names(PINOT_prepare_merge)[3] <- "Name"
write.csv(PINOT_prepare_merge, "data/processed_data/PINOT_merge_file.csv",row.names=FALSE)
#The resultant file has all of the PINOT reported interations, with the associated method name and correctly named columns.

#merging the methodological observations between databases--------------------------------------------------------
#now we want to call in all three files, ensure that the column names are standardised, and then merge the dataframes, according to column names (on top of one another).
HIPPIE_merge_file <-  read.csv('data/processed_data/HIPPIE_merge_file.csv', header=TRUE)
PINOT_merge_file <-  read.csv('data/processed_data/PINOT_merge_file.csv', header=TRUE)
MIST_merge_file <-  read.csv('data/processed_data/MIST_merge_file.csv', header=TRUE)


names(MIST_merge_file)[1] <- "A"
names(MIST_merge_file)[2] <- "B"
names(MIST_merge_file)[3] <- "Name"

P_H_M_mergefile<- bind_rows(HIPPIE_merge_file, PINOT_merge_file,MIST_merge_file)
P_H_M_mergefile_Method<- P_H_M_mergefile[!duplicated(P_H_M_mergefile), ] 
write.csv(P_H_M_mergefile_Method, "data/processed_data/P_H_M_method_mergefile.csv",row.names=FALSE)


#generating the merge files according to 'PubMedID' observation------------------------------------------------------------
#The next set of code is for generating the lists of interactions, with a new row corresponding to a new PubMed ID. 
#PINOT------------------------------------------------------------
PINOT_rawdata_PubmedID <- read.csv('data/rawdata/PINOT_FL_PubMedID_separatecolumn.csv')

names(PINOT_rawdata_PubmedID)[1] <- "A"
names(PINOT_rawdata_PubmedID)[2] <- "B"
names(PINOT_rawdata_PubmedID)[3] <- "PubMedID"

B <- PINOT_rawdata_PubmedID

n.col.pub <- ncol(B)
i <- 4
parsed <- B[, c(1:3)]

for (i in 4:n.col.pub) {
  add <- B[,c(1:2,i)]
  names(add)[3] <- "PubMedID"
  parsed <- rbind(parsed,add)
  i <- i+1
}
parsed <- na.omit(parsed) #1286 unique observations 
write.csv(parsed, "data/processed_data/PINOT_FL_PubMedID.csv",row.names=FALSE)

#HIPPIE------------------------------------------------------------

HIPPIE_rawdata_PubmedID <- read.csv('data/rawdata/HIPPIE_FL_PubMedID_separatecolumn.csv')

names(HIPPIE_rawdata_PubmedID)[1] <- "A"
names(HIPPIE_rawdata_PubmedID)[2] <- "B"
names(HIPPIE_rawdata_PubmedID)[3] <- "PubMedID"

B <- HIPPIE_rawdata_PubmedID

n.col.meths <- ncol(B)
i <- 4
parsed <- B[, c(1:3)]

for (i in 4:n.col.meths) {
  add <- B[,c(1:2,i)]
  names(add)[3] <- "PubMedID"
  parsed <- rbind(parsed,add)
  i <- i+1
}
parsed <- na.omit(parsed) 
write.csv(parsed, "data/processed_data/HIPPIE_FL_PubMedID.csv",row.names=FALSE)
#must make sure that the multi-ID problem hs been resoled in this file too, before merging with the PINOT and MIST files.

#MIST------------------------------------------------------------
#The following lines of code call in a dataframe (MIST) that contains the first layer interactome. The methods columns have been removed, and the dataframe has been organised such that all empty rows according to missing entries within the PubMedIS column have been removed. Now we need to run the code once again that assigns the Name A and Name B to the row containing the PubMedID. Since each PubMedID already has its own row, this does not generate any rows in which there is the interactor A and B, without a PubMedID. 

B <-  read.csv('data/rawdata/MIST_FL_PubMedID_sglrow.csv', header=TRUE)
names(B)[1] <- "A"
names(B)[3] <- "B"
names(B)[5] <- "PubMedID"
B <-B[c(1,3,5)]
end <- nrow(B)
i<-1

for (i in 1:end) {
  FLAG <- B[i,1]
  if (FLAG == 0) {
  B[i,1] <- B[(i-1),1]
  B[i,2] <- B[(i-1),2]
  }
 
  i <- i+1
}

write.csv(B, "data/processed_data/MIST_FL_PubMedID.csv",row.names=FALSE)


#PubMed merge file preparation------------------------------------------------------------
#now we want to call in all three (PubMedID) files, ensure that the column names are standardised, and then merge the dataframes, according to column names (on top of one another).

#The PINOT and HIPPIE files have been opened in Excel, The 'PubMed:' prefix has  been removed from all IDs in each row, so that the dataframes can be merged together. The new file is saved within the processed_data file with the suffix '_02'.


HIPPIE_merge_file <-  read.csv('data/processed_data/HIPPIE_FL_PubMedID_02.csv', header=TRUE)
names(HIPPIE_merge_file)[1] <- "A"
names(HIPPIE_merge_file)[2] <- "B"
names(HIPPIE_merge_file)[3] <- "PubMedID"
PINOT_merge_file <-  read.csv('data/processed_data/PINOT_FL_PubMedID_02.csv', header=TRUE)
names(PINOT_merge_file)[1] <- "A"
names(PINOT_merge_file)[2] <- "B"
names(PINOT_merge_file)[3] <- "PubMedID"
MIST_merge_file <-  read.csv('data/processed_data/MIST_FL_PubMedID.csv', header=TRUE)
names(MIST_merge_file)[1] <- "A"
names(MIST_merge_file)[2] <- "B"
names(MIST_merge_file)[3] <- "PubMedID"


P_H_M_mergefile_PubMedID<- rbind(HIPPIE_merge_file, PINOT_merge_file,MIST_merge_file) 
P_H_M_mergefile_PubMedID<- P_H_M_mergefile_PubMedID[!duplicated(P_H_M_mergefile_PubMedID), ] 
write.csv(P_H_M_mergefile_PubMedID, "data/processed_data/P_H_M_PubMedID_mergefile.csv",row.names=FALSE)

#Merging the Pubmed observations with the method observations --------------------------------------------------------------------------------------------------------
#So now we have a dataframe with each unique observation of each interaction according to PubMedID, and a dataframe with each unique observation of each interaction according to Method. Now to remove the column with the identifier (PubMed ID or Method) and merge the two dataframes according to column. Then a count can be performed to find out how many times each of the rows appears in duplicate in the dataframe. 
P_H_M_mergefile_PubMedID <-  read.csv('data/processed_data/P_H_M_PubMedID_mergefile.csv', header=TRUE)
P_H_M_mergefile_Method <-  read.csv('data/processed_data/P_H_M_method_mergefile.csv', header=TRUE)

P_H_M_mergefile_PubMedID <- P_H_M_mergefile_PubMedID[c(1,2)]
P_H_M_mergefile_Method <- P_H_M_mergefile_Method[c(1,2)]

P_H_M_mergefile_PubMed_Method<- rbind(P_H_M_mergefile_PubMedID,P_H_M_mergefile_Method)
write.csv(P_H_M_mergefile_PubMed_Method, "data/processed_data/P_H_M_mergefile_PubMed_Method.csv",row.names=FALSE)#In the merge file, each row represents a unique 'observation'.

#The following code adds a column 'n' with the number of times that each row is replicated within the dataframe (number of observations).
P_H_M_mergefile_PubMed_Method<- read.csv("data/processed_data/P_H_M_mergefile_PubMed_Method.csv")
P_H_M_mergefile_PubMed_Method<- P_H_M_mergefile_PubMed_Method %>%
  group_by(across(everything())) %>%
  mutate(n = n())
  
#The following code generates a complete list of interactions, with the number of times that the interaction has been observed within the 'n' column.
P_H_M_mergefile_PubMed_Method<- P_H_M_mergefile_PubMed_Method[!duplicated(P_H_M_mergefile_PubMed_Method), ]# This is the number of unique interactions
write.csv(P_H_M_mergefile_PubMed_Method, "data/processed_data/P_H_M_mergefile_PubMed_Method_numofobservations.csv",row.names=FALSE)
#Now we can apply the threshold to 'n' column, to retain only those rows with a value >2.

P_H_M_mergefile_PubMed_Method_threshold_above2<- subset(P_H_M_mergefile_PubMed_Method, n > 2) #corresponds to number of unique interactions meeting the threshold.

P_H_M_mergefile_PubMed_Method_threshold_above2 <-  subset(P_H_M_mergefile_PubMed_Method_threshold_above2, !B == '7316') #removes 'UBC'
write.csv(P_H_M_mergefile_PubMed_Method_threshold_above2, "data/processed_data/First_layer_interactions_threshholded.csv",row.names=FALSE)
  
FL_thresholded_unique_interactors<- P_H_M_mergefile_PubMed_Method_threshold_above2[c(2)] #Selects only the list of interactors
FL_thresholded_unique_interactors<- unique(FL_thresholded_unique_interactors) #480 unique interactors ( this number includes any of the NSL members that are returned as interactors)
names(FL_thresholded_unique_interactors)[1] <- "Analysis_2"
write.csv(FL_thresholded_unique_interactors, "data/processed_data/Analysis_2_interactors>2.csv",row.names=FALSE)

#Applying the multi-interactome threshold
#The next lines of code are to recall the interactors for which interaction is observed with the NSL complex, as a whole, replicated across 2 or more methods or 2 or more publications.
FL_observations <- read.csv("data/processed_data/P_H_M_mergefile_PubMed_Method.csv")
FL_observations<-FL_observations[c(2)]
FL_observations <- unique(FL_observations) 

#now we want to obtain the list of excluded interactions, based on the threshhold of '>2' observations. 

FL_observation_count_file <- read.csv("data/processed_data/P_H_M_mergefile_PubMed_Method_numofobservations.csv") #tells you the number of times each interaction is observed 
Excluded_interactions<- subset(FL_observation_count_file, n < 3) #This corresponds to the number of excluded interactions

#The following code creates a dataframe to merge with the dataframe reporting the number of NSL complex members interacted with.
Excluded_interactions <- Excluded_interactions[c(2)] #This generates the list of interactors, from the interactions that have been excluded.
Excluded_interactors <- unique(Excluded_interactions )
Excluded_interactors$Excluded <- c('Y') #add column as identifier
write.csv(Excluded_interactors, "data/processed_data/Excluded_interaction_interactors.csv",row.names=FALSE) #These are the interactors that are involved in the excluded interactions. They may not be excluded from the final list, if they meet the threshold in a single interactome.

#Now take the final list of FL interactors, post-thresholding. And see whether any of those 'removed' interactors (as part of a removed interaction) are actually still retained within the list, due to meeting the threshold within another interactome. Then, simply select the interactors that have been removed entirely to carry forward for review. 

Threshold_retained <- read.csv("data/processed_data/Analysis_2_interactors>2.csv")
Threshold_retained$In_final_list <- "Y" #add an identifier, so that we can see which of the interactors are in the final list anyway.

Excluded_interaction_interactors <- read.csv("data/processed_data/Excluded_interaction_interactors.csv")
Excluded_interaction_interactors <- Excluded_interaction_interactors[c(1)]

Retrieve_interactor<-merge(Excluded_interaction_interactors,Threshold_retained ,by.x="B", by.y="Analysis_2", all.x=TRUE)
Retrieve_interactor<- Retrieve_interactor[is.na(Retrieve_interactor$In_final_list),] 

write.csv(Retrieve_interactor, "data/processed_data/Retrieve_interactor.csv",row.names=FALSE)

#Then we need to find out how many observations are associated with each of the interactors individually. 
Pubmed_observations<-  read.csv('data/processed_data/P_H_M_PubmedID_mergefile.csv', header=TRUE) 
Pubmed_observations$Name <- "0"

method_observations <-  read.csv('data/processed_data/P_H_M_method_mergefile.csv', header=TRUE) 
method_observations$PubMedID <- "0"
Review_mergefile_PubMed_Method<- rbind(Pubmed_observations,method_observations)
Review_mergefile_PubMed_Method<-unique(Review_mergefile_PubMed_Method) 
Review_mergefile_PubMed_Method<-Review_mergefile_PubMed_Method[-c(1)] #This removes the seed, so now we are looking at the replicate observations of the interactor, irrespective of the seed.
Review_mergefile_PubMed_Method<-unique(Review_mergefile_PubMed_Method) # this removes any interactors which have been found to interact with >1 member of the NSL complex using the same method (same observation)
Review_mergefile_PubMed_Method<-Review_mergefile_PubMed_Method[c(1)] #selects only the list of interactors 
Review_mergefile_PubMed_Method<- Review_mergefile_PubMed_Method %>%
  group_by(across(everything())) %>%
  mutate(n = n())
Review_mergefile_PubMed_Method<-unique(Review_mergefile_PubMed_Method) #This list contains the number of unique observations, across Method and PubMedID, for each of the interactors (irrespective of the seed). Treats the NSL complex as a single seed. 

write.csv(Review_mergefile_PubMed_Method,"data/processed_data/Review_mergefile_PubmedID&Method.csv")

#Merge with the interactor review list to see which of those to review has >2 observations when the NSL is considered a single seed.

review_list<-  read.csv("data/processed_data/Retrieve_interactor.csv", header=TRUE) 
review_list<-review_list[c(1)]
Observations <- read.csv("data/processed_data/Review_mergefile_PubmedID&Method.csv", header=TRUE)
Observations<- Observations[c(2,3)]

review_list_observations <- merge(review_list, Observations, by.x="B", by.y="B",all.x=TRUE)
review_list_observations<- subset(review_list_observations, n > 2)

names_table<-  read.csv('data/conversion_files/conversion_table.csv', header=TRUE) #check gene names 
names_table<-names_table[c(1,3)]
review_list_observations <- merge(review_list_observations, names_table, by.x="B", by.y="entrez",all.x=TRUE)
write.csv(review_list_observations,"data/processed_data/Retrieved_FL_interactors.csv")

#Now these interactors need to be added to the final list of FL interactors 
Threshold_retained <- read.csv("data/processed_data/Analysis_2_interactors>2.csv")
Retrieved_interactors <- read.csv("data/processed_data/Retrieved_FL_interactors.csv")
Retrieved_interactors <- Retrieved_interactors[c(2)]
names(Retrieved_interactors)[names(Retrieved_interactors) == "B"] <- "Analysis_2"
Analysis_2_interactors_2_post_review <- rbind(Threshold_retained,Retrieved_interactors)
write.csv(Analysis_2_interactors_2_post_review,"data/processed_data/Analysis_2_interactors_2_post_review.csv")#This is the final list of FL interactors, post review.

